---
- name: TASKS | VM_CREATE | Destroy VM if exist
  community.general.proxmox_kvm:
    api_user: "{{ pve_api_user }}"
    api_token_id: "{{ pve_api_token_id }}"
    api_token_secret: "{{ pve_api_token_secret }}"
    api_host: "127.0.0.1"
    node: "{{ local_pve_node.stdout }}"
    vmid: "{{ pve_vm_id }}"
    state: absent

- name: TASKS | VM_CREATE | VM Create Basis
  community.general.proxmox_kvm:
    api_user: "{{ pve_api_user }}"
    api_token_id: "{{ pve_api_token_id }}"
    api_token_secret: "{{ pve_api_token_secret }}"
    api_host: "127.0.0.1"
    node: "{{ local_pve_node.stdout }}"
    vmid: "{{ pve_vm_id }}"
    state: present

- name: TASKS | VM_CREATE | Create temporary directory
  tempfile:
    state: directory
  register: local_temp_dir

- name: TASKS | VM_CREATE | Image Download
  get_url:
    url: "{{ template_image_url }}"
    dest: "{{ local_temp_dir.path }}/image.qcow2"

- name: TASKS | VM_CREATE | Image Apply Customizations
  ansible.builtin.shell: |
    virt-customize \
      -a "{{ local_temp_dir.path }}/image.qcow2" \
      --update \
    {% for pkg in template_image_custom_install %}
      --install '{{ pkg }}' \
    {% endfor %}
    {% for cmd in template_image_custom_cmd %}
      --run-command '{{ cmd }}' \
    {% endfor %}
  args:
    executable: /bin/bash
  when:
    - template_image_custom | bool

- name: TASKS | VM_CREATE | VM Import Disk Image
  ansible.builtin.shell: |
    qm disk import {{ pve_vm_id }} {{ local_temp_dir.path }}/image.qcow2 {{ pve_vm_default_storage }} | awk -F"'" '/Successfully imported disk as/ {split($2, a, ":"); print a[3]}'
  args:
    executable: /bin/bash
  register: report_import_disk

- name: TASKS | VM_CREATE | Delete temporary directory
  file:
    path: "{{ local_temp_dir.path }}"
    state: absent

- name: TASKS | VM_CREATE | VM Apply Configuration
  community.general.proxmox_kvm:
    api_user: "{{ pve_api_user }}"
    api_token_id: "{{ pve_api_token_id }}"
    api_token_secret: "{{ pve_api_token_secret }}"
    api_host: "127.0.0.1"
    update: true
    update_unsafe: true
    node: "{{ local_pve_node.stdout }}"
    vmid: "{{ pve_vm_id }}"
    state: present
    agent: "{{ pve_vm_agent }}"
    balloon: "{{ pve_vm_balloon }}"
    bios: "{{ pve_vm_bios }}"
    boot: "{{ pve_vm_boot }}"
    cipassword: "{{ pve_vm_cipassword }}"
    ciuser: "{{ pve_vm_ciuser }}"
    cores: "{{ pve_vm_cores }}"
    cpu: "{{ pve_vm_cpu }}"
    cpulimit: "{{ pve_vm_cpulimit }}"
    hotplug: "{{ pve_vm_hotplug }}"
    keyboard: "{{ pve_vm_keyboard }}"
    machine: "{{ pve_vm_machine }}"
    memory: "{{ pve_vm_memory }}"
    name: "{{ pve_vm_name }}"
    net:
      net0: "{{ pve_vm_net_net0 | default(omit) }}"
      net1: "{{ pve_vm_net_net1 | default(omit) }}"
      net2: "{{ pve_vm_net_net2 | default(omit) }}"
      net3: "{{ pve_vm_net_net3 | default(omit) }}"
      net4: "{{ pve_vm_net_net4 | default(omit) }}"
      net5: "{{ pve_vm_net_net5 | default(omit) }}"
    numa_enabled: "{{ pve_vm_numa_enabled }}"
    onboot: "{{ pve_vm_onboot }}"
    ostype: "{{ pve_vm_ostype }}"
    sata:
      sata0: "{{ pve_vm_sata_sata0 | default(omit) }}"
      sata1: "{{ pve_vm_sata_sata1 | default(omit) }}"
      sata2: "{{ pve_vm_sata_sata2 | default(omit) }}"
      sata3: "{{ pve_vm_sata_sata3 | default(omit) }}"
      sata4: "{{ pve_vm_sata_sata4 | default(omit) }}"
      sata5: "{{ pve_vm_sata_sata5 | default(omit) }}"
    scsihw: "{{ pve_vm_scsihw }}"
    serial: "{{ pve_vm_serial }}"
    vga: "{{ pve_vm_vga }}"
    virtio:
      virtio0: "{{ pve_vm_virtio_virtio0 | default(omit) }}"
      virtio1: "{{ pve_vm_virtio_virtio1 | default(omit) }}"
      virtio2: "{{ pve_vm_virtio_virtio2 | default(omit) }}"
      virtio3: "{{ pve_vm_virtio_virtio3 | default(omit) }}"
      virtio4: "{{ pve_vm_virtio_virtio4 | default(omit) }}"
      virtio5: "{{ pve_vm_virtio_virtio5 | default(omit) }}"

- name: TASKS | VM_CREATE | VM Convert into Template
  community.general.proxmox_kvm:
    api_user: "{{ pve_api_user }}"
    api_token_id: "{{ pve_api_token_id }}"
    api_token_secret: "{{ pve_api_token_secret }}"
    api_host: "127.0.0.1"
    node: "{{ local_pve_node.stdout }}"
    vmid: "{{ pve_vm_id }}"
    state: template